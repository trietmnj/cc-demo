name: Auto-transfer issues to usace-docs

on:
  issues:
    types: [opened]

jobs:
  xfer:
    runs-on: ubuntu-latest
    if: github.repository == 'YOURORG/cc-demo'
    permissions:
      issues: write
      contents: read
    steps:
      - name: "Preflight: verify token can access target repo"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'YOURORG';
            const targetRepo = 'usace-docs';
            try {
              const r = await github.request('GET /repos/{owner}/{repo}', {
                owner, repo: targetRepo,
                headers: { 'X-GitHub-Api-Version': '2022-11-28' }
              });
              core.info(`Target repo OK: visibility=${r.data.visibility}`);
            } catch (e) {
              core.setFailed(`Token cannot access ${owner}/${targetRepo}. Ensure PAT has Issues: Read & Write on BOTH repos.`);
            }

      - name: Transfer via API (skip if labeled keep-here)
        id: transfer
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'YOURORG';
            const sourceRepo = 'cc-demo';
            const targetRepo = 'usace-docs';
            const issue = context.payload.issue;

            if (issue.labels?.some(l => l.name === 'keep-here')) {
              core.notice("Found 'keep-here' label; not transferring.");
              return;
            }

            const res = await github.request(
              'POST /repos/{owner}/{repo}/issues/{issue_number}/transfer',
              {
                owner, repo: sourceRepo, issue_number: issue.number,
                new_repository: `${owner}/${targetRepo}`,
                headers: {
                  accept: 'application/vnd.github+json',
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              }
            );

            core.setOutput('new_url', res.data?.issue?.html_url || '');
            core.info(`Transferred -> ${res.data?.issue?.html_url}`);

      - name: "Fallback: copy + link if transfer failed"
        if: steps.transfer.outcome == 'failure'
        id: fallback
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'YOURORG';
            const sourceRepo = 'cc-demo';
            const targetRepo = 'usace-docs';
            const issue = context.payload.issue;

            // Create in target
            const created = await github.request('POST /repos/{owner}/{repo}/issues', {
              owner, repo: targetRepo,
              headers: { 'X-GitHub-Api-Version': '2022-11-28' },
              title: issue.title,
              body: `${issue.body || ''}\n\nCopied from ${owner}/${sourceRepo}#${issue.number}`
            });

            // Copy labels that exist in target (best effort)
            const labels = (issue.labels || []).map(l => l.name);
            if (labels.length) {
              try {
                await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/labels', {
                  owner, repo: targetRepo, issue_number: created.data.number, labels,
                  headers: { 'X-GitHub-Api-Version': '2022-11-28' }
                });
              } catch {}

            // Leave breadcrumb in source
            await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              owner, repo: sourceRepo, issue_number: issue.number,
              body: `Auto-moved to ${owner}/${targetRepo}#${created.data.number} -> ${created.data.html_url}`
            });

      - name: "Rewrite title in source repo -> [moved]: â€¦ (generic)"
        # run regardless of transfer success (we also did a copy on failure)
        if: steps.transfer.outcome == 'success' || steps.transfer.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'YOURORG';
            const sourceRepo = 'cc-demo';
            const issue = context.payload.issue;

            const original = issue.title || '';

            // Already [moved]: ? then do nothing (case-insensitive, flexible spacing)
            if (/^\s*\[moved\]\s*:\s*/i.test(original)) {
              core.info('Title already starts with [moved]:');
              return;
            }

            // Strip any number of leading [ ... ] tags, with optional colon after them
            const leadingTags = /^\s*(\[[^\]]+\]\s*)+(:\s*)?/u;
            const stripped = original.replace(leadingTags, '');

            const newTitle = `[moved]: ${stripped || original}`;

            if (newTitle !== original) {
              await github.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
                owner, repo: sourceRepo, issue_number: issue.number, title: newTitle,
                headers: { 'X-GitHub-Api-Version': '2022-11-28' }
              });
              core.info(`Title updated: "${original}" -> "${newTitle}"`);
            } else {
              core.info('No title change needed.');
            }

      - name: Close and lock source issue
        if: steps.transfer.outcome == 'success' || steps.transfer.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'YOURORG';
            const sourceRepo = 'cc-demo';
            const issue = context.payload.issue;

            // Close
            await github.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
              owner, repo: sourceRepo, issue_number: issue.number, state: 'closed',
              headers: { 'X-GitHub-Api-Version': '2022-11-28' }
            });

            // Lock (optional)
            await github.request('PUT /repos/{owner}/{repo}/issues/{issue_number}/lock', {
              owner, repo: sourceRepo, issue_number: issue.number,
              lock_reason: 'resolved',
              headers: { 'X-GitHub-Api-Version': '2022-11-28' }
            });
