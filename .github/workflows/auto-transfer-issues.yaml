      - name: "Rewrite title in source repo → [moved]: … (generic)"
        if: steps.transfer.outcome == 'success' || steps.transfer.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'YOURORG';         // <-- change to your user/org, e.g., 'trietmnj'
            const sourceRepo = 'cc-demo';    // <-- source repo name
            const issue = context.payload.issue;

            const original = issue.title || '';

            // If it already has [moved]: at the start (any spacing/case), do nothing
            if (/^\s*\[moved\]\s*:\s*/i.test(original)) {
              core.info('Title already starts with [moved]: — no change.');
              return;
            }

            // Match ANY number of leading [ ... ] tags, optionally followed by a colon, e.g.:
            // "[tag] Title", "[tag]: Title", "[a][b]:  Title", with variable spaces
            const leadingTags = /^\s*(\[[^\]]+\]\s*)+(:\s*)?/u;

            // Remove those leading tags (if present)
            const stripped = original.replace(leadingTags, '');

            // Build the new title. If nothing matched, we still prefix [moved]:
            const newTitle = `[moved]: ${stripped || original}`;

            if (newTitle !== original) {
              await github.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
                owner,
                repo: sourceRepo,
                issue_number: issue.number,
                title: newTitle,
                headers: { 'X-GitHub-Api-Version': '2022-11-28' }
              });
              core.info(`Title updated: "${original}" → "${newTitle}"`);
            } else {
              core.info('No title change needed.');
            }
