name: "Auto-move issues to usace-docs"

on:
  issues:
    types: [opened]

jobs:
  move:
    runs-on: ubuntu-latest
    if: github.repository == 'trietmnj/cc-demo'
    permissions:
      issues: write
      contents: read
    steps:
      - name: "Preflight: get target repo_id and check visibility"
        id: preflight
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'trietmnj';
            const targetRepo = 'usace-docs';
            const { data } = await github.request('GET /repos/{owner}/{repo}', {
              owner, repo: targetRepo,
              headers: { 'X-GitHub-Api-Version': '2022-11-28' }
            });
            core.info(`Target ${owner}/${targetRepo} visibility=${data.visibility} id=${data.id}`);
            core.setOutput('target_repo_id', String(data.id));

      - name: "Try official transfer API (skip if labeled keep-here)"
        id: transfer
        continue-on-error: true
        uses: actions/github-script@v7
        env:
          TARGET_REPO_ID: ${{ steps.preflight.outputs.target_repo_id }}
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'trietmnj';
            const sourceRepo = 'cc-demo';
            const issue = context.payload.issue;

            if (issue.labels?.some(l => l.name === 'keep-here')) {
              core.notice("Found 'keep-here' label; not transferring.");
              return;
            }

            const targetRepoId = Number(process.env.TARGET_REPO_ID);
            if (!targetRepoId) {
              core.setFailed('Missing TARGET_REPO_ID from preflight.');
              return;
            }

            const res = await github.request(
              'POST /repos/{owner}/{repo}/issues/{issue_number}/transfer',
              {
                owner,
                repo: sourceRepo,
                issue_number: issue.number,
                new_repository: targetRepoId,
                headers: {
                  accept: 'application/vnd.github+json',
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              }
            );

            core.setOutput('new_url', res.data?.issue?.html_url || '');
            core.info(`Transferred -> ${res.data?.issue?.html_url}`);

      - name: "Fallback: copy + link (runs if transfer failed)"
        if: steps.transfer.outcome == 'failure'
        id: copy
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'trietmnj';
            const sourceRepo = 'cc-demo';
            const targetRepo = 'usace-docs';
            const issue = context.payload.issue;

            const created = await github.request('POST /repos/{owner}/{repo}/issues', {
              owner, repo: targetRepo,
              headers: { 'X-GitHub-Api-Version': '2022-11-28' },
              title: issue.title,
              body: `${issue.body || ''}\n\n↪ Copied from ${owner}/${sourceRepo}#${issue.number}`
            });

            const labels = (issue.labels || []).map(l => l.name);
            if (labels.length) {
              try {
                await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/labels', {
                  owner, repo: targetRepo, issue_number: created.data.number, labels,
                  headers: { 'X-GitHub-Api-Version': '2022-11-28' }
                });
              } catch (e) {
                core.warning('Could not copy some labels (ensure they exist in target).');
              }
            }

            await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              owner, repo: sourceRepo, issue_number: issue.number,
              body: `Auto-moved to ${owner}/${targetRepo}#${created.data.number} → ${created.data.html_url}`
            });

            core.setOutput('new_url', created.data.html_url);

      - name: "Rewrite title in source repo -> [moved]: … (generic)"
        if: steps.transfer.outcome == 'success' || steps.transfer.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'trietmnj';
            const sourceRepo = 'cc-demo';
            const issue = context.payload.issue;
            const original = issue.title || '';

            if (/^\s*\[moved\]\s*:\s*/i.test(original)) {
              core.info('Title already starts with [moved]:');
              return;
            }

            // Strip any number of leading [ ... ] tags, optional colon after them
            const leadingTags = /^\s*(\[[^\]]+\]\s*)+(:\s*)?/u;
            const stripped = original.replace(leadingTags, '');
            const newTitle = `[moved]: ${stripped || original}`;

            if (newTitle !== original) {
              await github.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
                owner, repo: sourceRepo, issue_number: issue.number, title: newTitle,
                headers: { 'X-GitHub-Api-Version': '2022-11-28' }
              });
              core.info(`Title updated: "${original}" -> "${newTitle}"`);
            } else {
              core.info('No title change needed.');
            }

      - name: "Close and lock source issue"
        if: steps.transfer.outcome == 'success' || steps.transfer.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_XFER_TOKEN }}
          script: |
            const owner = 'trietmnj';
            const sourceRepo = 'cc-demo';
            const issue = context.payload.issue;

            await github.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
              owner, repo: sourceRepo, issue_number: issue.number, state: 'closed',
              headers: { 'X-GitHub-Api-Version': '2022-11-28' }
            });

            await github.request('PUT /repos/{owner}/{repo}/issues/{issue_number}/lock', {
              owner, repo: sourceRepo, issue_number: issue.number,
              lock_reason: 'resolved',
              headers: { 'X-GitHub-Api-Version': '2022-11-28' }
            });
